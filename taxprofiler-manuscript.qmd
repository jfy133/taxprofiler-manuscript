---
title: "nf-core/taxprofiler: highly parallelised and flexible pipeline for metagenomic taxonomic classification and profiling"
author:
    - name: Sofia Stamouli
      given: Sofia
      family: Stamouli
      orcid: 0009-0006-0893-3771
      roles: ['conceptualization', 'software', 'editing']
      affiliations:
      - ref: ki
      - ref: kuh
    - name: Moritz Beber
      given: Moritz
      family: Beber
      orcid: 0000-0003-2406-1978
      roles: ['conceptualization', 'software', 'editing']
      affiliations:
      - ref: usb
    - name: Lauri Mesilaakso
      given: Lauri
      family: Mesilaakso
      orcid:
      roles: ['software', 'editing']
      affiliations:
      - ref: rog
    - name: Tanja Normark
      given: Tanja
      family: Normark
      orcid:
      roles: ['software', 'editing']
      affiliations:
      - ref: ki
      - ref: kuh
    - name: Thomas A. Christensen II
      given: Thomas A.
      family: Christensen II
      orcid: 0000-0003-1219-9320
      roles: ['software', 'editing']
      affiliations:
      - ref: ksu
    - name: Lili Andersson-Li
      given: Lili
      family: Andersson-Li
      orcid:
      roles: ['software', 'editing']
      affiliations:
      - ref: ki
      - ref: kuh
    - name: Maxime Borry
      given: Maxime
      family: Borry
      orcid: 0000-0001-9140-7559
      roles: ['software', 'editing']
      affiliations:
      - ref: eva
    - name: Mahwash Jamy
      given: Mahwash
      family: Jamy
      orcid:
      roles: ['software', 'editing']
      affiliations:
      - ref: ki
      - ref: kuh
    - name: Rafal Stepien
      given: Rafal
      family: Stepien
      orcid:
      roles: ['software', 'editing']
      affiliations:
      - ref: uv
    - name: nf-core community
      url: https://nf-co.re
      email: core@nf-co.re
      roles: ['software']
      affiliations:
        - ref: xx
    - name: James A. Fellows Yates
      given: James A.
      family: Fellows Yates
      orcid: 0000-0001-5585-6277
      email: james_fellows_yates@eva.mpg.de
      corresponding: true
      roles: ['conceptualization', 'project administration', 'software', 'supervision', 'writing', 'editing']
      affiliations:
        - ref: eva
        - ref: hki
affiliations:
  - id: ki
    name: Department of Microbiology, Tumor and Cell Biology, Karolinkska Institutet
    address: Solnavägen 1
    city: Solna
    state: Stockholm
    postal-code: 17177
    country: Sweden
  - id: kuh
    name: Department of Clinical Microbiology, Karolinska University Hospital
    address: Anna Steckséns gata 41
    city: Solna
    state: Stockholm
    postal-code: 17177
    country: Sweden
  - id: usb
    name: Unseen Bio ApS
    address: Fruebjergvej 3
    city: Copenhagen
    state: Capital Region
    postal-code: 2100
    country: Denmark
  - id: eva
    name: Department of Archaeogenetics, Max Planck Institute for Evolutionary Anthropology
    address: Deutsche Pl. 6
    city: Leipzig
    state: Saxony
    postal-code: 04103
    country: Germany
  - id: hki
    name: Department of Paleobiotechnology, Leibniz Institute for Natural Product Research and Infection Biology Hans Knöll Institute
    address: Adolf-Reichwein-Straße
    city: Jena
    state: Thuringen
    postal-code: 07745
    country: Germany
  - id: rog
    name: Department of Clinical Microbiology, Region Östergötland
    address: "S:t Larsgatan	49 B"
    city: Linköping
    state: Östergötland
    postal-code: 58191
    country: Sweden
  - id: ksu
    name: Veterinary Diagnostic Laboratory, Kansas State University College of Veterinary Medicine
    address: 1800 Denison Ave
    city: Manhattan
    state: KS
    postal-code: 66506
    country: United States
  - id: uv
    name: Center for Public Health Genomics, University of Virginia
    address: University Avenue 1827
    city: Charlottesville
    state: VA
    postal-code: 22903
    country: United States
  - id: xx
bibliography: refs.bib
license: "CC BY"
crossref:
  lst-prefix: "Code Block"
---

## Abstract

Metagenomic classification tackles the problem of characterising the taxonomic source of all DNA sequencing reads in a sample. A common approach to address the differences and biases between the many different taxonomic classification tools is to run metagenomic data through multiple classification tools and databases. This, however, is a very time-consuming task when performed manually - particularly when combined with the appropriate preprocessing of sequencing reads before the classification.

Here we present nf-core/taxprofiler, a highly parallelised taxonomic classification and processing pipeline that allows for automated and simultaneous classification and/or profiling of both short- and long-read metagenomic sequencing libraries against a large number of taxonomic classifiers and profilers as well as databases within a single pipeline run. Implemented in Nextflow and as part of the nf-core initiative, the pipeline benefits from high levels of scalability and portability, allowing for large and small projects on a wide range of computing infrastructure, as well as best-practise software development and community support to ensure longevity and adaptability of the pipeline, keeping up with the field of metagenomics.

## Introduction

Shotgun metagenomics offers strong benefits to the taxonomic classification of DNA samples over targeted approaches [@Eloe-Fadrosh2016-gz;@Breitwieser2019-ys]. While metabarcoding approaches targeting the 16S rRNA or other marker genes are widely due to low cost and large, diverse reference databases [@Yilmaz2014-js;@Lynch2015-mz], metagenomic approaches have been gaining popularity with the increasingly lower costs of shotgun sequencing. These metagenomic analyses have been shown to provide similar resolution on microbial genomes during taxonomic classification [@Hillmann2018-ud], with the added benefit of having greater reusability potential of the data, via whole genome reconstruction and also functional classification of metagenomics [@Sharpton2014-wy;@Quince2017-bl].

Taxonomic classifiers (sometimes referred to as taxonomic binners) consists of identifying the original 'taxonomic source' of a given DNA sequence [@Ye2019-fl;@Meyer2022-dg;@Govender2022-td]. In metagenomics this typically consists of comparing millions of DNA sequences against hundreds or thousands of reference genomes either via alignment or 'k-mer matching' [@Sharpton2014-wy;@Sun2021-tq], with the most close match being considered the most likely original 'source' organism of that sequence. Taxonomic profilers profilers additionally will also try to infer species abundance of the organism in the original sample, based on the sequence abundance [@Nayfach2016-ej]. We will use classifiers and profilers interchangeably throughout the this publication.

Due to the scale of the problem, taxonomic profiling remains an 'unresolved problem' in bioinformatics. Having to identify the original source of many sequences, against many reference genomes but in an _efficient_ manner is understandably a difficult problem. Therefore a plethora of tools have been developed to address this challenge, all with their own biases and specific contexts that they have been developed in [@Sczyrba2017-ma;@Meyer2022-dg]. Additionally, each tool often produces tool-specific output formats making it difficult to efficiently cross compare results. Thus, no established 'gold standard' method currently exists.

One solution to address the range of different tools is to run all of them in parallel, and cross compare the results. This can be useful both for benchmarking studies [e.g. @Sczyrba2017-ma;@Meyer2022-dg], but also to build consensus profiles whereby confidence of a particular taxonomic identification can be increased when it is detected by multiple tools [@McIntyre2017-td;@Ye2019-fl].

A second challenge in taxonomic classification is a question of databases. As with tools, there is no one set 'gold standard' database. Different questions and contexts may require different databases, such as when a researcher wants to search for both bacteria and viruses species in samples, and as an extension of this, taxonomic classifiers may need different settings for each database. Furthermore, as genomic sequencing becomes cheaper and more efficient, the number of publicly available reference genomes are rapidly increasing [@Nasko2018-cl], making the size of databases taxonomic classifiers also a much larger and often outpacing the computational capacity available to researchers. In fact, while this was one of the main motivations behind classifiers such as Kraken2 [@Wood2019-mf], these algorithmic techniques are already becoming insufficient [@Wright2023-yr].

Finally, with the decrease of costs, this possibility for larger and larger metagenome sequencing datasets increases, meaning the sample sizes of studies are increasing, as exemplified by the doubling of the number of metagenomes on the European Bioinformatic Institute's MGnify database in two years [@Mitchell2019-kt]. Altogether this highlights the need for methods to efficiently profile many samples using many tools. Manually setting up bioinformatic jobs for classification tasks for each database and settings against different tools on traditional academic computing infrastructure (e.g. high performance computing clusters or 'HPC' clusters) can be very tedious. Additionally, particularly for very large sample sets, there is increasing use of cloud platforms that have greater scalability than traditional HPCs. Being able to reliably and reproducibly execute taxonomic classification tasks across infrastructure with minimal intervention would therefore be a boon for the metagenomics field.

Here we present nf-core/taxprofiler, a pipeline designed to allow users to efficiently and simultaneously taxonomically classify and profile short- and long-read sequencing data against multiple tools and databases in a single pipeline run. nf-core/taxprofiler utilises Nextflow [@Di_Tommaso2017-xu] to ensure efficiency, portability, and scalability, and has been developed within the nf-core initiative of Nextflow pipelines [@Ewels2020-vi] to ensure high quality coding practises and user accessibility, including detailed documentation and a graphical-user-interface (GUI) execution interface.

## Implementation

nf-core/taxprofiler aims to facilitate three main steps of a typical shotgun metagenomic workflow [@Chiu2019-mv]. Taking in short- (e.g. Illumina) or long-read (e.g. Nanopore) FASTQ or FASTA files, it can (1) perform a range of appropriate read preprocessing steps, (2) perform taxonomic classification and profiling against a range of different tools depending on user preferences, and finally (3) perform post-classification aggregation and standardisation of the resulting profiles with the possibility of visualisation to the outputs (@fig-workflow-diagram). All relevant preprocessing statistics are displayed in an interactive and dynamic MultiQC report [@Ewels2020-vi].

![Visual overview of the nf-core/taxprofiler workflow. nf-core/taxprofiler can take in FASTQ (short or long reads) or FASTA files (long reads), that will optionally go through sequencing quality control (e.g. with FastQC), read preprocessing (e.g. removal of adapters), complexity filtering, host removal, and run merging before performing taxonomic classification and/or profiling with a user-selected range of tools and databases. Output from all classifiers and profilers are standardised into a common taxon table format, and when supported visualisations of the profiles are generated.](taxprofiler_tube.png){#fig-workflow-diagram fig-alt="Visual overview of the nf-core/taxprofiler workflow. nf-core/taxprofiler can take in FASTQ (short or long reads) or FASTA files (long reads), that will optionally go through sequencing quality control, read preprocessing, complexity filtering, host removal, and run merging before going into taxonomic classification and/or profiling with a user-selected range of tools and databases. Output from all classifiers and profilers are additionally standardised into a common taxon table format and some with visualisation of profiles."}

### Input and Execution

The pipeline can be executed via typical Nextflow commands, or using the standard nf-core 'launch' GUI ([https://nf-co.re/taxprofiler/launch](https://nf-co.re/taxprofiler/launch)), making the pipeline accessible for both computationally experienced as well as less experienced researchers. In addition to the general usage and parameter documentation of the pipeline (https://nf-co.re/taxprofiler). The GUI offers immediate assistance and guidance to users on what each parameter does, both in short- and long-form, with long-form parameter descriptions additionally describing which tool-specific parameter(s) are being modified for each pipeline parameter ([@fig-launch-page]). The GUI also includes controlled user input by providing strict drop-down lists and input validation prior execution of the pipeline to reduce the risk of typos and other mistakes (in contrast the command-line interface (CLI) that only includes validation at pipeline run-time).

![Screenshot of the nf-core pipeline launch graphical user interface with nf-core/taxprofiler options displayed. The web browser-based interface provides guidance for how to configure each pipeline parameter by providing both short and long help descriptions to help guide users in which contexts to configure each parameter. Additional elements such as radio buttons, drop down menus, and background regular expressions check for validity of input. When pressing launch, a prepared configuration file and command is provided that can be copied and pasted by the user into the terminal](taxprofiler_launchpage.png){#fig-launch-page fig-alt="Screenshot of the nf-core pipeline launch graphical user interface with nf-core/taxprofiler options displayed. The web browser-based interface provides guidance for how to configure each pipeline parameter by providing both short and long help descriptions to help guide users in which contexts to configure each parameter. Additional elements such as radio buttons, drop down menus, and background regular expressions check for validity of input. When pressing launch, a prepared configuration file and command is provided that can be copied and pasted by the user into the terminal"}

An example nf-core command line execution of the pipeline can be seen in figure (@lst-example-cmd), where two input files are supplied: one file specifying paths of FASTQ files of metagenomic samples and necessary metadata for preprocessing (such as sample ID and sequencing platform), and the second file specifying paths to the user-defined databases with per-database classification parameters. Various parameters are available to optionally turn on different preprocessing steps, and provide additional configurations such as tool selection and value options. Note that even if a user supplies a given database in the database input sheet, the corresponding profiling tool must still be activated with the corresponding pipeline parameter (e.g. `--run_kraken2`). Per-classifier flags are also available for the optional saving of additional non-profile output files.

```{#lst-example-cmd .bash lst-cap="Example nf-core/taxprofiler command for running short-read quality control, removal of host DNA and executing the k-mer based Kraken2 and marker gene alignment MetaPhlAn3 tools."}
$ nextflow run nf-core/taxprofiler -r 1.1.0 \
-profile singularity,<institute> \
--input <samplesheet.csv> --databases <database.csv> \
--perform_shortread_qc  --shortread_qc_minlength 20 --preprocessing_qc_tool falco \
--run_host_removal --hostremoval_reference 'host_genome.fasta' \
--run_kraken2 --kraken2_save_reads \
--run_metaphlan3 \
--run_krona \
--run_profile_standardisation \
```

All nf-core pipelines are strictly versioned (specified with the Nextflow `-r` flag), and to ensure reproducibility, each version of the pipeline has a fixed set of software used for each step of the pipeline. The fixed set of software are controlled through the use of the conda package manager and containers (e.g., docker, singularity) from the stable Bioconda [@Gruning2018-vr] and BioContainers [@Da_Veiga_Leprevost2017-gl] repositories. This, coupled with the intrinsic Nextflow ability to execute on most infrastructure whether that is a local laptop (resource requirements permitting), traditional HPC, as well across common cloud providers also makes nf-core/taxprofiler a very portable pipeline that can be used across many contexts.

### Preprocessing

Preprocessing steps in nf-core/taxprofiler are aimed at removing laboratory and sequencing artefacts that may influence taxonomically profiling, either for computing resource consumption and/or false-positive or false-negative classification reasons. First sequencing quality control with FastQC [@Andrews2010-pd] or Falco [@De_Sena_Brandine2021-pi] is carried out. Falco was included in for reduced memory requirements, in particular for long reads sequencing. Artificial library adapter sequences added during sequencing reduces accuracy during alignment by reducing sequence specificity, and in some cases, may result in false-positive hits due to adapter sequence contamination in reference genomes [@Schaffer2018-be;@Breitwieser2018-xg] [^1]. Additionally, the paired-end merging may provide longer sequences that will allow more specific classification when paired-end alignment is not supported by a given classifier. For these tasks nf-core/taxprofiler can apply either fastp [@Chen2018-vg] or AdapterRemoval2 [@Schubert2016-qv] for short-reads, and currently Porechop [@Wick2017-cn] for Oxford Nanopore long-read data. For both short- and long-reads FastQC or Falco is run again to allow assessment on the performance of the adapter removal and/or pair-merging step.

Low complexity sequences, e.g. sequences containing long stretches mono- or di-nucleotide repeats provide little specific genetic information that contribute to taxonomic identification, as they can align to many different reference genomes [@Schmieder2011-ea;@Clarke2019-al]. Including such reads during taxonomic profiling can increase run-time and memory usage for little gain, as during lowest-common-ancestor (LCA) classification steps they will be assigned to high-level taxonomic levels (e.g. Kingdom). nf-core/taxprofiler performs removal of these reads through complexity filtering algorithms as provided by fastp, BBDuk [@Bushnell2022-pf], or PRINSEQ++ [@Cantu2019-lh]. Long read sequences often do not have such reads as lengths are sufficient enough to capture greater sequence diversity - but it is sometimes desired to only classify reads longer than a certain length - as these provide more precise taxonomic information [@Dilthey2019-ps;@Portik2022-jp]. Therefore, nf-core/taxprofiler can remove reads shorter than a user-defined length using Filtlong.

Removing host DNA is another common preprocessing step in metagenomic studies. This can help speed up run-time, particularly in microbiome studies, where detection of microbes are of interest. Furthermore, host-contamination of reference genomes in public databases is common [@Longo2011-qd;@Kryukov2016-my;@Breitwieser2019-iz] and therefore the removal of such sequences can also decrease the risk of false positive taxonomic assignment. To remove multiple hosts or other sequences, all reference genomes can be combined into a single FASTA reference file. Short-read host removal can be carried out with Bowtie2 [@Langmead2012-ik;@Langmead2019-ej] and minimap2 [@Li2018-qq] for long-reads, both in combination with SAMtools [@Li2009-wy;@Danecek2021-gj], where reads are aligned against the reference genome and the off-target (unaligned) reads are then converted back to FASTQ format for classification.

Finally, nf-core/taxprofiler can optionally perform run merging where libraries have been sequenced over multiple lanes to generate one profile per sample or library. The final set of reads used for profiling can be optionally saved for downstream re-use.

Throughout all steps, relevant statistics and log files are generated and used both for the final pipeline run report as well as saved into the results directory of the pipeline run for further inspection where necessary.

### Profiling

There are many types of metagenomic profile techniques, from profiling against whole-genome references with alignment or k-mer based approaches, to methods involving alignment to species-specific marker-gene families [@Quince2017-bl,@Ye2019-fl]. nf-core/taxprofiler aims to support and include all established classification or profiling tools as requested by the community. The choice of tools used in a pipeline run is up to the user, with a tool being executed when both the corresponding database and `--run_<tool>` flag is provided. Specific classification settings for each tool and database are specified in the database CSV input sheet. Some tools also have pipeline level command-line flags for controlling certain aspects of output files.

As of version 1.1.0, the following classifiers and profilers are available: Kraken2 [@Wood2019-mf], Bracken [@Lu2017-vc], KrakenUniq [@Breitwieser2018-xg], Centrifuge [@Kim2016-qc], MALT [@Vagene2018-px], DIAMOND [@Buchfink2021-ks], Kaiju [@Menzel2016-xy], MetaPhlAn [@Blanco-Miguez2023-cq], mOTUs [@Ruscheweyh2022-hn], ganon [@Piro2020-es], KMCP [@Shen2023-bk]. [@tbl-tool-summaries] summarises the category and reference database type for each tool.

<!-- TODO CHECK!!!!! AND maybe add classifier vs profiler? -->

| Sequence Matching Type | Method          | Reference Type | Tool       |
|------------------------|-----------------|----------------|------------|
| Nucleotide             | k-mer based     | whole-genome   | Kraken2    |
| Nucleotide             | k-mer based     | whole-genome   | Bracken    |
| Nucleotide             | k-mer based     | whole-genome   | KrakenUniq |
| Nucleotide             | k-mer based     | whole-genome   | ganon      |
| Nucleotide             | k-mer based     | whole-genome   | KMCP       |
| Amino Acid             | k-mer based     | whole-genome   | Kaiju      |
| Nucleotide             | alignment based | whole-genome   | Centrifuge |
| Nucleotide/Amino Acid  | alignment based | whole-genome   | MALT       |
| Amino Acid             | alignment based | whole-genome   | DIAMOND    |
| Nucleotide             | alignment based | marker-gene    | MetaPhlAn3 |
| Nucleotide             | alignment based | marker-gene    | MetaPhlAn4 |
| Nucleotide             | alignment based | marker-gene    | mOTUS      |

: List of nf-core/taxprofiler supported taxonomic profilers as of version 1.1 and their method and support input database types. Sequencing matching type refers to which 'molecular alphabet' is primarily used for matching between a query (read) and a reference (genome/gene). Method refers to the algorithm type used for matching. Reference type refers to the typical sequence type used in database construction of the tool. {#tbl-tool-summaries}

<!-- TODO: EMPHASISE PARALLELISATION AND EFFICIENCY -->

By default, nf-core/taxprofiler produces the per-sample main taxonomic classification profile from a tool or a tool's report generation tool. The output is normally in the form of counts per reference sequencing, with additional statistics about the hits of a particular organism (estimated abundance, taxonomic level etc.). Users can also optionally request output of per-read classification output, and output such as classified and unclassified reads in FASTQ format, where supported.

### Post-profiling

In metagenomic studies, it is common practise to compare the profiles among many samples, and the results of multiple profiles are normally stored in 'taxon tables', i.e, counts per reference (rows), for each sample (columns). When available, nf-core/taxprofiler supports the option to produce the 'native' taxon table of each classification tool when multiple samples are run.

One of the challenges that researchers face when comparing multiple taxonomic classifiers or profilers is the heterogenous output formats that are produced, and often requires custom parser and merging scripts for each tool to standardise. To facilitate more user-friendly cross-comparison between tools, nf-core/taxprofiler utilises the TAXPASTA tool [@Beber2023-hk] to generate standardised profiles and generate multi-sample tables.

Summary statistics for the entire pipeline are visualised and displayed in a customisable MultiQC report [@Ewels2020-vi], when supported, to support user quality control of data and pipeline runs. Krona plots [@Ondov2011-se] can also optionally be generated for supported tools to help provide further visualisation of taxonomic profiles.

### Output

To summarise, the main default output from nf-core/taxprofiler are both classifier 'native' and standardised single- and multi-sample taxonomic profiles with counts per-taxon and an interactive MultiQC run report with all run statistics, in addition to the raw log files themselves where available.

The MultiQC run report displays statistics and summary visualisations for all steps of the pipeline where possible, lists of versions for all tools of each step of the pipeline, and provides a dynamically-constructed text for the recommendeded 'methods' text for reporting how the pipeline was executed (including relevant citations) that users can use in their own publications.

Optional outputs can include other types of profiles (e.g. per read classification) and in other formats as produced by the tools themselves, as well as raw reads from preprocessing steps and output visualisations from Krona. Nextflow resource usage and trace reports are also by default produced for users to check pipeline performance.

## Use Cases and Benchmarking

To demonstrate different uses of nf-core/taxprofiler, we ran the pipeline on datasets of XXXX  from XXX , on a XXXX .

Run metric can be seen in Figure XXXXXX .

-->

## Discussion

<!-- TODO: functionality comparison between other pipelines -->

nf-core/taxprofiler has been specifically developed for the analysis of _metagenomic_ data. While other types of taxonomic profiling data such as 16S amplicon sequencing are well established fields with a range of popular high-quality and best-practise pipelines (e.g. [@Blanco-Miguez2023-cq;@Schloss2009-vk]) and databases [@DeSantis2006-cm;@Yilmaz2014-js], whereas the number of robust and high quality pipelines for metagenomics remains much lower - thus the need for highly-multiplexed classification is more desirable for the newer metagenomics methods. Despite this, tools such as METAXA2 [@Bengtsson-Palme2015-ar] that use shotgun sequencing reads to recover 16S sequences from metagenomic samples.

The pipeline has been developed in the nf-core community, providing strong and long term support for the continued community-based development and maintenance of the pipeline. In this framework, we will continue to add additional metagenomic classification and profiling tools as they become established and as requested by the metagenomics community. This also applies to sequencing platforms; nf-core/taxprofiler already supports Nanopore long-read data, however the use of long-read PacBio data for metagenomic data is growing in interest [@Portik2022-jp]. We are therefore considering adding dedicated preprocessing steps for this type of sequencing data.

A remaining major challenge for metagenomics researchers is the construction of databases for each profiling tool. Currently, nf-core/taxprofiler requires users to construct these manually and to supply to the pipeline. While we feel this is currently a reasonable investment as such databases can be repeatedly re-used, we are exploring the possibility to add including an additional complementary workflow in the pipeline to allow automated database construction of all classification tools, given a set of FASTA reference files.

Finally, once an overall taxonomic profile is generated, researchers often wish to validate hits through more sensitive and accurate methods such as with read-mapping alignment. The pipeline could be easily extended to have a validation step where, utilising Nextflow's execution parallelism, the input sequences could be aligned back to the reference genomes of only those species with hits from the taxonomic classification. This step could also be particularly useful for researchers in palaeogenomics, where alignment information can be used to authenticate ancient DNA within their samples.

## Conclusion

nf-core/taxprofiler is an accessible and efficient pipeline for metagenomic taxonomic classification and profiling that can be executed on anywhere from laptops to the cloud provided there are sufficient computing resources. Offering a wide range of taxonomic profilers, it provides flexibility for users not just on choice of profiling tool but also with databases and database settings, with any number being able to be supplied to the pipeline in a single run. We hope that through detailed documentation and a range of execution options, nf-core/taxprofiler will make reproducible and high-throughput metagenomics more accessible for a wide range of disciplines.

<!-- TODO make this last sentence better, it's a bit poop -->

## Data Availability

All data used in this publication

## Code Availability

nf-core/taxprofiler source code is available on GitHub at [https://github.com/nf-core/taxprofiler](https://github.com/nf-core/taxprofiler), and each release is archived on Zenodo (DOI: [10.5281/zenodo.7728364](https://doi.org/10.5281/zenodo.7728364))

The version of the pipeline described in this paper is version (<!-- VERSION -->) (Zenodo archive DOI: <!-- DOI -->)

## Supplementary Data

## Acknowledgments

We thank Prof. Christina Warinner and the Microbiome Sciences group MPI-EVA for original discussions that lead to the pipeline. We are also grateful for the nf-core community for ongoing support in the development in the pipeline, in particular for the contributions by Jianhong Ou.

## Funding

S.S. and L.A-L. were supported by Rapid establishment of comprehensive laboratory pandemic preparedness – RAPID-SEQ.
This material is based upon work supported by the U.S. Department of Agriculture, Agricultural Research Service, under agreement No. 58-3022-0-001 (T.A.C II). 
M.B. and J.A.F.Y were supported by the Max Planck Society. 
J.A.F.Y was supported by the Werner Siemens-Stiftung ("Paleobiotechnology", Awarded to Prof. Pierre Stallforth and Prof. Christina Warinner).

## References

[^1]: For an 'infamous' case of adapter sequences in a published eukaryotic genome, see the following blog posts

    Graham Etherington: https://web.archive.org/web/20201121104759/http://grahametherington.blogspot.com/2014/09/why-you-should-qc-your-reads-and-your.html
    Sixing Huang: https://web.archive.org/web/20220904205331/https://dgg32.medium.com/carp-in-the-soil-1168818d2191