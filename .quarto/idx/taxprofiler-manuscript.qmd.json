{"title":"nf-core/taxprofiler: highly parallelised and flexible pipeline for metagenomic taxonomic classification and profiling","markdown":{"yaml":{"title":"nf-core/taxprofiler: highly parallelised and flexible pipeline for metagenomic taxonomic classification and profiling","author":[{"name":"Sofia Stamouli","given":"Sofia","family":"Stamouli","orcid":"0009-0006-0893-3771","affiliations":[{"ref":"ki"},{"ref":"kuh"}]},{"name":"Moritz Beber","given":"Moritz","family":"Beber","orcid":"0000-0003-2406-1978","affiliations":[{"ref":"usb"}]},{"name":"Lauri Mesilaakso","given":"Lauri","family":"Mesilaakso","orcid":null,"affiliations":[{"ref":"rog"}]},{"name":"Tanja Normark","given":"Tanja","family":"Normark","orcid":null,"affiliations":[{"ref":"ki"},{"ref":"kuh"}]},{"name":"Thomas A. Christensen II","given":"Thomas A.","family":"Christensen II","orcid":"0000-0003-1219-9320","affiliations":[{"ref":"ksu"}]},{"name":"Lili Andersson-Li","given":"Lili","family":"Andersson-Li","orcid":null,"affiliations":[{"ref":"ki"},{"ref":"kuh"}]},{"name":"Maxime Borry","given":"Maxime","family":"Borry","orcid":"0000-0001-9140-7559","affiliations":[{"ref":"eva"}]},{"name":"Mahwash Jamy","given":"Mahwash","family":"Jamy","orcid":null,"affiliations":[{"ref":"ki"},{"ref":"kuh"}]},{"name":"Rafal Stepien","given":"Rafal","family":"Stepien","orcid":null,"affiliations":[{"ref":"uv"}]},{"name":"nf-core community","url":"https://nf-co.re","affiliations":[{"ref":"xx"}]},{"name":"James A. Fellows Yates","given":"James A.","family":"Fellows Yates","orcid":"0000-0001-5585-6277","email":"james_fellows_yates@eva.mpg.de","corresponding":true,"affiliations":[{"ref":"eva"},{"ref":"hki"}]}],"affiliations":[{"id":"ki","name":"Department of Microbiology, Tumor and Cell Biology, Karolinkska Institutet","address":"Solnavägen 1","city":"Solna","state":"Stockholm","postal-code":17177,"country":"Sweden"},{"id":"kuh","name":"Department of Clinical Microbiology, Karolinska University Hospital","address":"Anna Steckséns gata 41","city":"Solna","state":"Stockholm","postal-code":17177,"country":"Sweden"},{"id":"usb","name":"Unseen Bio ApS","address":"Fruebjergvej 3","city":"Copenhagen","state":"Capital Region","postal-code":2100,"country":"Denmark"},{"id":"eva","name":"Department of Archaeogenetics, Max Planck Institute for Evolutionary Anthropology","address":"Deutsche Pl. 6","city":"Leipzig","state":"Saxony","postal-code":2115,"country":"Germany"},{"id":"hki","name":"Department of Paleobiotechnology, Leibniz Institute for Natural Product Research and Infection Biology Hans Knöll Institute","address":"Adolf-Reichwein-Straße","city":"Jena","state":"Thuringen","postal-code":4069,"country":"Germany"},{"id":"rog","name":"Department of Clinical Microbiology, Region Östergötland","address":"S:t Larsgatan\t49 B","city":"Linköping","state":"Östergötland","postal-code":58191,"country":"Sweden"},{"id":"ksu","name":"Veterinary Diagnostic Laboratory, Kansas State University College of Veterinary Medicine","address":"1800 Denison Ave","city":"Manhattan","state":"KS","postal-code":66506,"country":"United States"},{"id":"uv","name":"Center for Public Health Genomics, University of Virginia","address":"University Avenue 1827","city":"Charlottesville","state":"VA","postal-code":22903,"country":"United States"},{"id":"xx"}],"bibliography":"refs.bib","license":"CC BY"},"headingText":"Abstract","containsRefs":false,"markdown":"\n\n\nMetagenomic classification tackles the problem of characterising the taxonomic source of all DNA sequencing reads in a sample. A common approach to address the differences and biases between the many different taxonomic classification tools is to run sequencing libraries through multiple classification tools and databases. This, however, is a very time intensive task when performing manually - particularly when combined with the appropriate preprocessing of sequencing reads before the classification.\n\nHere we present nf-core/taxprofiler, a highly parallelised taxonomic classification and processing pipeline that allows for automated and simultaneous classification and/or profiling of of both short- and long-read metagenomic sequencing libraries against a large number of taxonomic classifiers and profilers as well as databases in one pipeline run. Implemented in Nextflow and nf-core, the pipeline benefits from high levels of scalability and portability, allowing for large and small projects on a wide range of computing infrastructure, as well as best-practise software development and community support to ensure longevity and adaptability of the pipeline as the field of metagenomics develops.\n\n## Introduction\n\nThere are a range of strong benefits of metagenomic approaches to taxonomic classification of DNA samples compared to targeted approaches [CITE]. While targeted approaches such as 16S or other marker gene amplicon sequencing have in the past been useful due to low cost and large and diverse reference databases, metagenomic analyses has been shown to produce similar resolution during taxonomic classification [@Hillmann2018-ud] (with increasing lower costs of shotgun sequencing), but the added benefit of having greater reusability potential of the data, via whole genome reconstruction and also functional classification of metagenomics.\n\nTaxonomic profiling consists of identifying the original 'taxonomic source' of a given DNA sequence [CITE]. In metagenomics this typically consists of comparing millions of DNA sequences against hundreds or thousands of reference genomes either via alignment or 'k-mer matching' [CITE], and the most close match being considered the most likely original 'source' organism of that sequence. Some profilers additionally will also try to infer actual (cellular) species abundance of the organism in the original sample, based on the sequence abundance [CITE].\n\nDue to the scale of the problem, taxonomic profiling remains an 'unresolved problem' in bioinformatics. Having to identify the original source of many sequences, against many reference genomes but in an _efficient_ manner is understandably a difficult problem. Therefore a plethora of tools have been developed to address this challenge, all with their own biases and specific contexts that they have been developed in [@Sczyrba2017-ma;@Meyer2022-dg]. Additionally, each tool often produces tool-specific output formats making it difficult to efficiently cross compare results. Thus, no established 'gold standard' method currently exists.\n\nOne solution to addressing the range of different tools is to run all of them in parallel, and cross compare the results. This can both be useful for benchmarking studies [e.g. @Sczyrba2017-ma;@Meyer2022-dg], but also to build consensus profiles whereby confidence of a particular taxonomic identification can be increased when it is detected by multiple tools [CITE].\n\nA second challenge in taxonomic profiling is a question of databases. As with tools, there is no one set 'gold standard' database for taxonomic profiling. Different questions and contexts may require different databases, such as when a researcher wants to search for both bacteria_and viruses species in samples, and as an extension of this, classifiers may need different settings for each database. Furthermore, as genomic sequencing becomes cheaper and more efficient, the number of publicly available reference genomes are rapidly increasing [CITE], making the size of databases taxonomic classifiers also much a larger.\n\nFinally, with the sinking of sequencing costs, this opens up the possibility for larger and larger metagenome sequencing, meaning the sample sizes of studies are increasing further highlighting the need for methods for efficiently profiling many samples against many tools and databases. Manually setting up bioinformatic jobs for classification tasks for each database and settings against different tools on traditional academic computing infrastructure (e.g. high performance computing clusters or 'HPC' clusters) can be very tedious. Additionally, particularly for very large sample sets, there is increasing use of cloud platforms that have greater scalability than traditional HPCs. Being able to reliably and reproducibly execute taxonomic classification tasks across infrastructure with minimal intervention would therefore be a boon for the metagenomics field.\n\nHere we present nf-core/taxprofiler a pipeline designed to allow users to efficiently and simultaneously taxonomically classify and profile short- and long-read sequencing data against multiple tools and databases in a single pipeline run. nf-core/taxprofiler utilises Nextflow [@Di_Tommaso2017-xu] to ensure efficiency, portability, and scalability, and has been developed within the nf-core initiative of Nextflow pipelines [@Ewels2020-vi] to ensure high quality coding practises and user accessibility, including detailed documentation and a graphical-user-interface (GUI) execution interface.\n\n## Implementation\n\nnf-core/taxprofiler aims to facilitate three main steps of a typical shotgun metagenomic workflow. Taking in short- (e.g. Illumina) or long-read (e.g. Nanopore) FASTQ or FASTA files, it can perform a range of appropriate preprocessing steps of reads, then perform taxonomic classification profiling against a range of different tools depending on the wish of the user, and finally perform post-classification aggregation and standardisation of the resulting profiles with the possibility of visualisation of outputs [FIGURE 1]. All relevant preprocessing statistics are displayed in an interactive and dynamic MultiQC report [CITE].\n\n![Visual overview of the nf-core/taxprofiler workflow. nf-core/taxprofiler can take in FASTQ (short or long reads) or FASTA files (long reads), that will optionally go through sequencing quality control, read preprocessing, complexity filtering, host removal, and run merging before going into taxonomic classification and/or profiling with a user-selected range of tools and databases. Output from all classifiers and profilers are additionally standardised into a common taxon table format and some with visualisation of profiles.](taxprofiler_tube.png){#fig-workflow-diagram fig-alt=\"nf-core/taxprofiler workflow diagram in a metro map style\"}\n\nWe note that while we are aware of discussions on the topic of differing definitions of metagenomic classifier and profiler [CITE], we generally refer to classifiers and profilers as synonyms throughout this article, as previously described [TAXPASTA PAPER], both many different types of tools are used in the pipeline.\n\n### Input and Execution\n\nThe pipeline can be executed via typical Nextflow commands, or using the standard nf-core 'launch' GUI ([https://nf-co.re/taxprofiler/launch](https://nf-co.re/taxprofiler/launch)), making the pipeline accessible for both computationally experienced as well as less experienced researchers. In addition to the general usage and parameter documentation of the pipeline (https://nf-co.re/taxprofiler). The GUI offers immediate assistance and guidance to users on what each parameter does, both in short- and long-form, with long-form parameter descriptions additionally describing which tool-specific parameter(s) are being modified for each pipeline parameter (<!-- SCREENSHOT FIGURE -->). The GUI also includes controlled user input by providing strict drop-down lists and input validation prior execution of the pipeline to reduce the risk of typos and other mistakes (in contrast the command-line interface (CLI) that only includes validation at pipeline run-time).\n\nAn example nf-core command line execution of the pipeline can be seen in in figure <!--- COMMAND FIGURE -->, where two input files are supplied: one of paths of FASTQ files of metagenomic samples and necessary metadata for preprocessing (such as sample ID and sequencing platform ), and then a second giving paths to the user-supplied databases with parameters the user wishes the databases to be aligned to with. Various parameters are available to optionally turn on different preprocessing steps, and provide additional configurations such as tool selection and value options. Even if a user supplies a tool's database to the database input sheet, the user must still activate the execution of each classifier they wish to use with dedicated flags, with some additional per-classifier flags for saving particular optional output files.\n\n```bash\n$ nextflow run nf-core/taxprofiler -r 1.1.0 \\\n-profile singularity,<institute> \\\n--input <samplesheet.csv> --databases <database.csv> \\\n--perform_shortread_qc  --shortread_qc_minlength 20 --preprocessing_qc_tool falco \\\n--run_host_removal --hostremoval_reference 'host_genome.fasta' \\\n--run_kraken2 --kraken2_save_reads \\\n--run_metaphlan3 \\\n--run_krona \\\n--run_profile_standardisation \\\n```\n\nAll nf-core pipelines are strictly versioned (specified with the Nextflow `-r` flag), and to ensure reproducibility each version of the pipeline has a fixed set of software used for each step of the pipeline. The fixed set of software are controlled through the use of the conda package manager and containers (e.g., docker, singularity) from the stable bioconda [CITE] and biocontainer [CITE] repositories. This, coupled with the intrinsic Nextflow ability to execute on most infrastructure whether that is a local laptop (resource requirements permitting), traditional HPC, as well across common cloud providers also makes nf-core/taxprofiler a very portable pipeline that can be used across many contexts.\n\n<!-- SCREENSHOT OF LAUNCH -->\n\n### Preprocessing\n\nPreprocessing steps in nf-core/taxprofiler are aimed at removing laboratory and sequencing artefacts that may influence taxonomically profiling, either for computing resource consumption and/or false-positive or false-negative classification reasons. First sequencing quality control with FastQC [CITE] or Falco [CITE] is carried out. Falco was included in for reduced memory requirements in particular for long reads sequencing. Library adapter sequences can reduce accuracy during alignment and are sometimes contaminants inside reference genomes [CITE CARP BLOG], and paired-end merging may provide longer sequences that will allow more specific classification when paired-end alignment is not supported by a given classifier. For these tasks nf-core/taxprofiler can apply either fastp [CITE] or AdapterRemoval2 [CITE] for short-reads, and Porechop [CITE] for Oxford Nanopore long-read data. For both short- and long-reads FastQC or Falco is run again to allow assessment on the performance of the adapter removal and/or pair-merging step.\n\nLow complexity sequences, e.g. sequences containing long stretches mono- or di-nucleotide repeats provide little specific genetic information that contribute to taxonomic identification, as they can align to many different reference genomes. Including such reads during profiling can increase run-time and memory usage for little gain, as during lowest-common-ancestor (LCA) classification steps they will be assigned to high-level taxonomic levels such as Kingdom. nf-core/taxprofiler offers removal of these reads through complexity filtering algorithms as provided by fastp, BBDuk [CITE], or PRINSEQ++ [CITE]. Long read sequences often do not have such reads as lengths are sufficient enough to capture greater sequence diversity - but it is sometimes desired to only classify reads longer than a certain length - as these provide sufficient taxonomic information. Therefore nf-core/taxprofiler can remove contigs shorter than a user-defined length using Filtlong.\n\nAnother common preprocessing step in metagenomic studies is to remove possible host DNA. This can help speed up run-time, particularly for microbiome studies, where detection of only microbes are of interest. Furthermore, host-contamination of reference genomes on public databases is common [CITE], therefore removal of such sequences can also decrease the risk of false positive taxonomic identifications.  If users wish to remove multiple hosts or other sequences, they can simply combine all reference genomes into a single FASTA reference file. Short-read host removal can be carried out with Bowtie2 [CITE] and minimap2 for long-reads, both in combination with SAMtools [CITE].\n\nFinally, nf-core/taxprofiler can optionally perform run merging where libraries have been sequenced over multiple lanes to generate one profile per sample or library. The final set of reads used for profiling can be optionally saved for downstream re-use\n\nAcross all steps, relevant statistics and log files are generated and used both for the final pipeline run report as well as saved into the results directory of the pipeline run for deeper inspection where necessary.\n\n### Profiling\n\nThere are many types of metagenomic profile techniques from profiling against whole-genome references with alignment or k-mer based approaches [CITE], or methods involving alignment to species-specific marker-gene families [@Quince2017-bl,OTHERS?]. nf-core/taxprofiler aims to support and include all established classification or profiling tools as requested by the community. Which tools are used in a pipeline run is up to the user, with a tool being executed both a corresponding database and `--run_<tool>` flag is provided. Specific classification/profiling settings for each tool and database are specified in the database CSV input sheet, however for some tools pipeline level command-line flags are available.\n\nAs of version 1.1.0, the following classifiers and profilers are available: Kraken2 [CITE], Bracken [CITE], KrakenUniq [CITE], Centrifuge [CITE], MALT [CITE], DIAMOND [CITE], Kaiju [CITE], MetaPhlAn3 [CITE], MetaPhlAn4 [CITE] mOTUs [CITE], ganon [CITE], KMCP [CITE]. Table <!-- TODO --> summarises the category and reference database type for each tool.\n\n<!-- TODO CHECK!!!!! AND add fig id AND maybe add classifier vs profiler? -->\n| Method          | Reference Type | Tool       |\n|-----------------|----------------|------------|\n| k-mer based     | whole-genome   | Kraken2    |\n| k-mer based     | whole-genome   | Bracken    |\n| k-mer based     | whole-genome   | KrakenUniq |\n| k-mer based     | whole-genome   | ganon      |\n| ???             | ???            | KMCP       |\n| alignment based | whole-genome   | Centrifuge |\n| alignment based | whole-genome   | MALT       |\n| alignment based | whole-genome   | DIAMOND    |\n| alignment based | whole-genome   | Kaiju      |\n| alignment based | marker-gene    | MetaPhlAn3 |\n| alignment based | marker-gene    | MetaPhlAn4 |\n| alignment based | marker-gene    | mOTUS      |\n\n<!-- EMPHASISE PARALLELISATION AND EFFICIENCY -->\n\nnf-core/taxprofiler by default produces the per-sample main taxonomic classification profile from a tool or a tool's report generation tool, normally in the form of counts per reference sequencing, with additional statistics about the hits of a particular organism (estimated abundance, taxonomic level etc.). Users can also optionally request output of per-read classification output, and output such as classified and unclassified reads in FASTQ format, where supported.\n\n### Post-profiling\n\nMetagenomic studies often must compare the profiles between many samples, and the results of multiple profiles are normally stored in 'taxon tables', i.e, counts per reference (rows), for each sample (columns). When available nf-core/taxprofiler can optionally produce the 'native' taxon table of each classification tool when multiple samples are run.\n\nWhen researchers wish to compare between taxonomic classifiers or profilers, they must often deal with the heterogenous output formats that are produced by each tool, typically in the form of custom parser and merging scripts for each tool. To facilitate more user-friendly cross-comparison between tools, nf-core/taxprofiler utilises the TAXPASTA tool [@Beber???] to generate standardised profiles and generate multi-sample tables.\n\nSummary statistics for the entire pipeline are visualised are displayed in a customisable MultiQC report [CITE], when supported, to support user quality control of data and pipeline runs. Krona plots [CITE] can also optionally be generated for supported tools to help provide further visualisation of taxonomic profiles.\n\n### Output\n\nTo summarise, the main default output from nf-core/taxprofiler are both classifier 'native' and standardised single- and multi-sample taxonomic profiles with counts per-taxon and an interactive MultiQC run report with all run statistics, in addition to the raw log files themselves where available. The MultiQC run report displays statistics and summary visualisations for all steps of the pipeline where possible, and also includes versions for all tools and dynamically-constructed recommended publication methods text and citations (depending on what options were specified in the pipeline run) that users can use in their own publications. Optional outputs can include other types of profiles (e.g. per read classification) and in other formats as produced by the tools themselves, as well as raw reads from preprocessing steps and output visualisations from Krona. Nextflow resource usage and trace reports are also by default produced for users to check pipeline performance.\n\n## Use Cases and Benchmarking\n\nTo demonstrate different uses of nf-core/taxprofiler, we ran the pipeline on datasets of <!-- TODO -->  from <!-- TODO --> , on a <!-- TODO --> .\n\nRun metric can be seen in Figure <!-- TODO --> .\n\n## Discussion\n\n<!-- TODO: functionality comparison between other pipelines -->\n\nnf-core/taxprofiler has been designed strictly for the processing of _metagenomic_ data. Other types of taxonomic profiling data such as 16S amplicon sequencing are well established fields with a range of popular high-quality and best-practise pipelines (e.g. [CITE: QIIME, MOTHUR ]) and databases ([CITE: Greengenes and Silva]), whereas the number of robust and high quality pipelines for metagenomics remains much lower - thus the need for highly-multiplexed classification is more desirable for the newer metagenomics method. Despite this, tools such as [THAT TOOL THAT WAS REQUESTED] that use shotgun sequencing reads to recover 16S sequences from metagenomic samples.\n\nThe pipeline has been developed in the nf-core community, providing strong and long term support for the continued community-based development and maintenance of the pipeline. In this concept, we will continue to add additional metagenomic classification and profiling tools as they become established and as requested by the metagenomics community. This also applies to sequencing platforms, nf-core/taxprofiler already supports Nanopore long-read data, however long-read PacBio data [CITE] may be of interest, and thus we could add appropriate preprocessing steps for this type of data too.\n\nA remaining major pain point for metagenomics researchers is the construction of databases for each of the tools. Currently nf-core/taxprofiler requires users to construct these manually to supply to the pipeline (which we feel is currently reasonable investment as such databases can be repeatedly re-used), however we are exploring including an additional workflow in the pipeline to allow, given a set of FASTA reference files, automated database construction for all classification tool pipelines.\n\nFinally, once an overall taxonomic profile is generated, researchers often wish to validate hits through more sensitive and accurate methods such as with read-mapping alignment. The pipeline could be easily extended to have a validation step where, utilising Nextflow's execution parallelism, sequencing libraries could be aligned back to the reference genomes of only those species with hits from the taxonomic classification. This could also have additional benefits for researchers in palaeogenomics, where alignment information can be used to authenticate ancient DNA within their samples.\n\n## Conclusion\n\nnf-core/taxprofiler is a accessible and efficient pipeline for metagenomic taxonomic classification and profiling that can be executed on anyway from laptops to the cloud provided there is sufficient computing resources. Offering a wide range of taxonomic profilers, it provides flexibility for users not just on choice of profiling tool but also with databases and database settings, with any number being able to be supplied to the pipeline in a single run. We hope that through detailed documentation and a range of execution options, that nf-core/taxprofiler will make reproducible and high-throughput metagenomics more accessible for a wide range of disciplines.\n\n<!-- TODO make this last sentence better, it's a bit poop -->\n\n## Data Availability\n\nAll data used in this publication\n\n## Code Availability\n\nnf-core/taxprofiler source code is available on GitHub at https://github.com/nf-core/taxprofiler, and each release is archived on Zenodo (<!-- DOI -->)\n\nThe version of the pipeline described in this paper is version (<!-- VERSION -->) (Zenodo archive DOI: <!-- DOI -->)\n\n## Supplementary Data\n\n## Acknowledgments\n\nWe thank Prof. Christina Warinner and the Microbiome Sciences group MPI-EVA for original discussions that lead to the pipeline. We are also grateful for the nf-core community for ongoing support in the development in the pipeline, in particular for the contributions by Jianhong Ou.\n\n## Funding\n\nS.S. and L.A-L. was supported by Rapid establishment of comprehensive laboratory pandemic preparedness – RAPID-SEQ\nThis material is based upon work supported by the U.S. Department of Agriculture, Agricultural Research Service, under agreement No. 58-3022-0-001 (T.A.C II).\nM.B. and J.A.F.Y were supported by the Max Planck Society. J.A.F.Y was supported by the Werner Siemens-Stiftung (\"Paleobiotechnology\", Awarded to Prof. Pierre Stallforth and Prof. Christina Warinner).\n\n\n## References\n","srcMarkdownNoYaml":"\n\n## Abstract\n\nMetagenomic classification tackles the problem of characterising the taxonomic source of all DNA sequencing reads in a sample. A common approach to address the differences and biases between the many different taxonomic classification tools is to run sequencing libraries through multiple classification tools and databases. This, however, is a very time intensive task when performing manually - particularly when combined with the appropriate preprocessing of sequencing reads before the classification.\n\nHere we present nf-core/taxprofiler, a highly parallelised taxonomic classification and processing pipeline that allows for automated and simultaneous classification and/or profiling of of both short- and long-read metagenomic sequencing libraries against a large number of taxonomic classifiers and profilers as well as databases in one pipeline run. Implemented in Nextflow and nf-core, the pipeline benefits from high levels of scalability and portability, allowing for large and small projects on a wide range of computing infrastructure, as well as best-practise software development and community support to ensure longevity and adaptability of the pipeline as the field of metagenomics develops.\n\n## Introduction\n\nThere are a range of strong benefits of metagenomic approaches to taxonomic classification of DNA samples compared to targeted approaches [CITE]. While targeted approaches such as 16S or other marker gene amplicon sequencing have in the past been useful due to low cost and large and diverse reference databases, metagenomic analyses has been shown to produce similar resolution during taxonomic classification [@Hillmann2018-ud] (with increasing lower costs of shotgun sequencing), but the added benefit of having greater reusability potential of the data, via whole genome reconstruction and also functional classification of metagenomics.\n\nTaxonomic profiling consists of identifying the original 'taxonomic source' of a given DNA sequence [CITE]. In metagenomics this typically consists of comparing millions of DNA sequences against hundreds or thousands of reference genomes either via alignment or 'k-mer matching' [CITE], and the most close match being considered the most likely original 'source' organism of that sequence. Some profilers additionally will also try to infer actual (cellular) species abundance of the organism in the original sample, based on the sequence abundance [CITE].\n\nDue to the scale of the problem, taxonomic profiling remains an 'unresolved problem' in bioinformatics. Having to identify the original source of many sequences, against many reference genomes but in an _efficient_ manner is understandably a difficult problem. Therefore a plethora of tools have been developed to address this challenge, all with their own biases and specific contexts that they have been developed in [@Sczyrba2017-ma;@Meyer2022-dg]. Additionally, each tool often produces tool-specific output formats making it difficult to efficiently cross compare results. Thus, no established 'gold standard' method currently exists.\n\nOne solution to addressing the range of different tools is to run all of them in parallel, and cross compare the results. This can both be useful for benchmarking studies [e.g. @Sczyrba2017-ma;@Meyer2022-dg], but also to build consensus profiles whereby confidence of a particular taxonomic identification can be increased when it is detected by multiple tools [CITE].\n\nA second challenge in taxonomic profiling is a question of databases. As with tools, there is no one set 'gold standard' database for taxonomic profiling. Different questions and contexts may require different databases, such as when a researcher wants to search for both bacteria_and viruses species in samples, and as an extension of this, classifiers may need different settings for each database. Furthermore, as genomic sequencing becomes cheaper and more efficient, the number of publicly available reference genomes are rapidly increasing [CITE], making the size of databases taxonomic classifiers also much a larger.\n\nFinally, with the sinking of sequencing costs, this opens up the possibility for larger and larger metagenome sequencing, meaning the sample sizes of studies are increasing further highlighting the need for methods for efficiently profiling many samples against many tools and databases. Manually setting up bioinformatic jobs for classification tasks for each database and settings against different tools on traditional academic computing infrastructure (e.g. high performance computing clusters or 'HPC' clusters) can be very tedious. Additionally, particularly for very large sample sets, there is increasing use of cloud platforms that have greater scalability than traditional HPCs. Being able to reliably and reproducibly execute taxonomic classification tasks across infrastructure with minimal intervention would therefore be a boon for the metagenomics field.\n\nHere we present nf-core/taxprofiler a pipeline designed to allow users to efficiently and simultaneously taxonomically classify and profile short- and long-read sequencing data against multiple tools and databases in a single pipeline run. nf-core/taxprofiler utilises Nextflow [@Di_Tommaso2017-xu] to ensure efficiency, portability, and scalability, and has been developed within the nf-core initiative of Nextflow pipelines [@Ewels2020-vi] to ensure high quality coding practises and user accessibility, including detailed documentation and a graphical-user-interface (GUI) execution interface.\n\n## Implementation\n\nnf-core/taxprofiler aims to facilitate three main steps of a typical shotgun metagenomic workflow. Taking in short- (e.g. Illumina) or long-read (e.g. Nanopore) FASTQ or FASTA files, it can perform a range of appropriate preprocessing steps of reads, then perform taxonomic classification profiling against a range of different tools depending on the wish of the user, and finally perform post-classification aggregation and standardisation of the resulting profiles with the possibility of visualisation of outputs [FIGURE 1]. All relevant preprocessing statistics are displayed in an interactive and dynamic MultiQC report [CITE].\n\n![Visual overview of the nf-core/taxprofiler workflow. nf-core/taxprofiler can take in FASTQ (short or long reads) or FASTA files (long reads), that will optionally go through sequencing quality control, read preprocessing, complexity filtering, host removal, and run merging before going into taxonomic classification and/or profiling with a user-selected range of tools and databases. Output from all classifiers and profilers are additionally standardised into a common taxon table format and some with visualisation of profiles.](taxprofiler_tube.png){#fig-workflow-diagram fig-alt=\"nf-core/taxprofiler workflow diagram in a metro map style\"}\n\nWe note that while we are aware of discussions on the topic of differing definitions of metagenomic classifier and profiler [CITE], we generally refer to classifiers and profilers as synonyms throughout this article, as previously described [TAXPASTA PAPER], both many different types of tools are used in the pipeline.\n\n### Input and Execution\n\nThe pipeline can be executed via typical Nextflow commands, or using the standard nf-core 'launch' GUI ([https://nf-co.re/taxprofiler/launch](https://nf-co.re/taxprofiler/launch)), making the pipeline accessible for both computationally experienced as well as less experienced researchers. In addition to the general usage and parameter documentation of the pipeline (https://nf-co.re/taxprofiler). The GUI offers immediate assistance and guidance to users on what each parameter does, both in short- and long-form, with long-form parameter descriptions additionally describing which tool-specific parameter(s) are being modified for each pipeline parameter (<!-- SCREENSHOT FIGURE -->). The GUI also includes controlled user input by providing strict drop-down lists and input validation prior execution of the pipeline to reduce the risk of typos and other mistakes (in contrast the command-line interface (CLI) that only includes validation at pipeline run-time).\n\nAn example nf-core command line execution of the pipeline can be seen in in figure <!--- COMMAND FIGURE -->, where two input files are supplied: one of paths of FASTQ files of metagenomic samples and necessary metadata for preprocessing (such as sample ID and sequencing platform ), and then a second giving paths to the user-supplied databases with parameters the user wishes the databases to be aligned to with. Various parameters are available to optionally turn on different preprocessing steps, and provide additional configurations such as tool selection and value options. Even if a user supplies a tool's database to the database input sheet, the user must still activate the execution of each classifier they wish to use with dedicated flags, with some additional per-classifier flags for saving particular optional output files.\n\n```bash\n$ nextflow run nf-core/taxprofiler -r 1.1.0 \\\n-profile singularity,<institute> \\\n--input <samplesheet.csv> --databases <database.csv> \\\n--perform_shortread_qc  --shortread_qc_minlength 20 --preprocessing_qc_tool falco \\\n--run_host_removal --hostremoval_reference 'host_genome.fasta' \\\n--run_kraken2 --kraken2_save_reads \\\n--run_metaphlan3 \\\n--run_krona \\\n--run_profile_standardisation \\\n```\n\nAll nf-core pipelines are strictly versioned (specified with the Nextflow `-r` flag), and to ensure reproducibility each version of the pipeline has a fixed set of software used for each step of the pipeline. The fixed set of software are controlled through the use of the conda package manager and containers (e.g., docker, singularity) from the stable bioconda [CITE] and biocontainer [CITE] repositories. This, coupled with the intrinsic Nextflow ability to execute on most infrastructure whether that is a local laptop (resource requirements permitting), traditional HPC, as well across common cloud providers also makes nf-core/taxprofiler a very portable pipeline that can be used across many contexts.\n\n<!-- SCREENSHOT OF LAUNCH -->\n\n### Preprocessing\n\nPreprocessing steps in nf-core/taxprofiler are aimed at removing laboratory and sequencing artefacts that may influence taxonomically profiling, either for computing resource consumption and/or false-positive or false-negative classification reasons. First sequencing quality control with FastQC [CITE] or Falco [CITE] is carried out. Falco was included in for reduced memory requirements in particular for long reads sequencing. Library adapter sequences can reduce accuracy during alignment and are sometimes contaminants inside reference genomes [CITE CARP BLOG], and paired-end merging may provide longer sequences that will allow more specific classification when paired-end alignment is not supported by a given classifier. For these tasks nf-core/taxprofiler can apply either fastp [CITE] or AdapterRemoval2 [CITE] for short-reads, and Porechop [CITE] for Oxford Nanopore long-read data. For both short- and long-reads FastQC or Falco is run again to allow assessment on the performance of the adapter removal and/or pair-merging step.\n\nLow complexity sequences, e.g. sequences containing long stretches mono- or di-nucleotide repeats provide little specific genetic information that contribute to taxonomic identification, as they can align to many different reference genomes. Including such reads during profiling can increase run-time and memory usage for little gain, as during lowest-common-ancestor (LCA) classification steps they will be assigned to high-level taxonomic levels such as Kingdom. nf-core/taxprofiler offers removal of these reads through complexity filtering algorithms as provided by fastp, BBDuk [CITE], or PRINSEQ++ [CITE]. Long read sequences often do not have such reads as lengths are sufficient enough to capture greater sequence diversity - but it is sometimes desired to only classify reads longer than a certain length - as these provide sufficient taxonomic information. Therefore nf-core/taxprofiler can remove contigs shorter than a user-defined length using Filtlong.\n\nAnother common preprocessing step in metagenomic studies is to remove possible host DNA. This can help speed up run-time, particularly for microbiome studies, where detection of only microbes are of interest. Furthermore, host-contamination of reference genomes on public databases is common [CITE], therefore removal of such sequences can also decrease the risk of false positive taxonomic identifications.  If users wish to remove multiple hosts or other sequences, they can simply combine all reference genomes into a single FASTA reference file. Short-read host removal can be carried out with Bowtie2 [CITE] and minimap2 for long-reads, both in combination with SAMtools [CITE].\n\nFinally, nf-core/taxprofiler can optionally perform run merging where libraries have been sequenced over multiple lanes to generate one profile per sample or library. The final set of reads used for profiling can be optionally saved for downstream re-use\n\nAcross all steps, relevant statistics and log files are generated and used both for the final pipeline run report as well as saved into the results directory of the pipeline run for deeper inspection where necessary.\n\n### Profiling\n\nThere are many types of metagenomic profile techniques from profiling against whole-genome references with alignment or k-mer based approaches [CITE], or methods involving alignment to species-specific marker-gene families [@Quince2017-bl,OTHERS?]. nf-core/taxprofiler aims to support and include all established classification or profiling tools as requested by the community. Which tools are used in a pipeline run is up to the user, with a tool being executed both a corresponding database and `--run_<tool>` flag is provided. Specific classification/profiling settings for each tool and database are specified in the database CSV input sheet, however for some tools pipeline level command-line flags are available.\n\nAs of version 1.1.0, the following classifiers and profilers are available: Kraken2 [CITE], Bracken [CITE], KrakenUniq [CITE], Centrifuge [CITE], MALT [CITE], DIAMOND [CITE], Kaiju [CITE], MetaPhlAn3 [CITE], MetaPhlAn4 [CITE] mOTUs [CITE], ganon [CITE], KMCP [CITE]. Table <!-- TODO --> summarises the category and reference database type for each tool.\n\n<!-- TODO CHECK!!!!! AND add fig id AND maybe add classifier vs profiler? -->\n| Method          | Reference Type | Tool       |\n|-----------------|----------------|------------|\n| k-mer based     | whole-genome   | Kraken2    |\n| k-mer based     | whole-genome   | Bracken    |\n| k-mer based     | whole-genome   | KrakenUniq |\n| k-mer based     | whole-genome   | ganon      |\n| ???             | ???            | KMCP       |\n| alignment based | whole-genome   | Centrifuge |\n| alignment based | whole-genome   | MALT       |\n| alignment based | whole-genome   | DIAMOND    |\n| alignment based | whole-genome   | Kaiju      |\n| alignment based | marker-gene    | MetaPhlAn3 |\n| alignment based | marker-gene    | MetaPhlAn4 |\n| alignment based | marker-gene    | mOTUS      |\n\n<!-- EMPHASISE PARALLELISATION AND EFFICIENCY -->\n\nnf-core/taxprofiler by default produces the per-sample main taxonomic classification profile from a tool or a tool's report generation tool, normally in the form of counts per reference sequencing, with additional statistics about the hits of a particular organism (estimated abundance, taxonomic level etc.). Users can also optionally request output of per-read classification output, and output such as classified and unclassified reads in FASTQ format, where supported.\n\n### Post-profiling\n\nMetagenomic studies often must compare the profiles between many samples, and the results of multiple profiles are normally stored in 'taxon tables', i.e, counts per reference (rows), for each sample (columns). When available nf-core/taxprofiler can optionally produce the 'native' taxon table of each classification tool when multiple samples are run.\n\nWhen researchers wish to compare between taxonomic classifiers or profilers, they must often deal with the heterogenous output formats that are produced by each tool, typically in the form of custom parser and merging scripts for each tool. To facilitate more user-friendly cross-comparison between tools, nf-core/taxprofiler utilises the TAXPASTA tool [@Beber???] to generate standardised profiles and generate multi-sample tables.\n\nSummary statistics for the entire pipeline are visualised are displayed in a customisable MultiQC report [CITE], when supported, to support user quality control of data and pipeline runs. Krona plots [CITE] can also optionally be generated for supported tools to help provide further visualisation of taxonomic profiles.\n\n### Output\n\nTo summarise, the main default output from nf-core/taxprofiler are both classifier 'native' and standardised single- and multi-sample taxonomic profiles with counts per-taxon and an interactive MultiQC run report with all run statistics, in addition to the raw log files themselves where available. The MultiQC run report displays statistics and summary visualisations for all steps of the pipeline where possible, and also includes versions for all tools and dynamically-constructed recommended publication methods text and citations (depending on what options were specified in the pipeline run) that users can use in their own publications. Optional outputs can include other types of profiles (e.g. per read classification) and in other formats as produced by the tools themselves, as well as raw reads from preprocessing steps and output visualisations from Krona. Nextflow resource usage and trace reports are also by default produced for users to check pipeline performance.\n\n## Use Cases and Benchmarking\n\nTo demonstrate different uses of nf-core/taxprofiler, we ran the pipeline on datasets of <!-- TODO -->  from <!-- TODO --> , on a <!-- TODO --> .\n\nRun metric can be seen in Figure <!-- TODO --> .\n\n## Discussion\n\n<!-- TODO: functionality comparison between other pipelines -->\n\nnf-core/taxprofiler has been designed strictly for the processing of _metagenomic_ data. Other types of taxonomic profiling data such as 16S amplicon sequencing are well established fields with a range of popular high-quality and best-practise pipelines (e.g. [CITE: QIIME, MOTHUR ]) and databases ([CITE: Greengenes and Silva]), whereas the number of robust and high quality pipelines for metagenomics remains much lower - thus the need for highly-multiplexed classification is more desirable for the newer metagenomics method. Despite this, tools such as [THAT TOOL THAT WAS REQUESTED] that use shotgun sequencing reads to recover 16S sequences from metagenomic samples.\n\nThe pipeline has been developed in the nf-core community, providing strong and long term support for the continued community-based development and maintenance of the pipeline. In this concept, we will continue to add additional metagenomic classification and profiling tools as they become established and as requested by the metagenomics community. This also applies to sequencing platforms, nf-core/taxprofiler already supports Nanopore long-read data, however long-read PacBio data [CITE] may be of interest, and thus we could add appropriate preprocessing steps for this type of data too.\n\nA remaining major pain point for metagenomics researchers is the construction of databases for each of the tools. Currently nf-core/taxprofiler requires users to construct these manually to supply to the pipeline (which we feel is currently reasonable investment as such databases can be repeatedly re-used), however we are exploring including an additional workflow in the pipeline to allow, given a set of FASTA reference files, automated database construction for all classification tool pipelines.\n\nFinally, once an overall taxonomic profile is generated, researchers often wish to validate hits through more sensitive and accurate methods such as with read-mapping alignment. The pipeline could be easily extended to have a validation step where, utilising Nextflow's execution parallelism, sequencing libraries could be aligned back to the reference genomes of only those species with hits from the taxonomic classification. This could also have additional benefits for researchers in palaeogenomics, where alignment information can be used to authenticate ancient DNA within their samples.\n\n## Conclusion\n\nnf-core/taxprofiler is a accessible and efficient pipeline for metagenomic taxonomic classification and profiling that can be executed on anyway from laptops to the cloud provided there is sufficient computing resources. Offering a wide range of taxonomic profilers, it provides flexibility for users not just on choice of profiling tool but also with databases and database settings, with any number being able to be supplied to the pipeline in a single run. We hope that through detailed documentation and a range of execution options, that nf-core/taxprofiler will make reproducible and high-throughput metagenomics more accessible for a wide range of disciplines.\n\n<!-- TODO make this last sentence better, it's a bit poop -->\n\n## Data Availability\n\nAll data used in this publication\n\n## Code Availability\n\nnf-core/taxprofiler source code is available on GitHub at https://github.com/nf-core/taxprofiler, and each release is archived on Zenodo (<!-- DOI -->)\n\nThe version of the pipeline described in this paper is version (<!-- VERSION -->) (Zenodo archive DOI: <!-- DOI -->)\n\n## Supplementary Data\n\n## Acknowledgments\n\nWe thank Prof. Christina Warinner and the Microbiome Sciences group MPI-EVA for original discussions that lead to the pipeline. We are also grateful for the nf-core community for ongoing support in the development in the pipeline, in particular for the contributions by Jianhong Ou.\n\n## Funding\n\nS.S. and L.A-L. was supported by Rapid establishment of comprehensive laboratory pandemic preparedness – RAPID-SEQ\nThis material is based upon work supported by the U.S. Department of Agriculture, Agricultural Research Service, under agreement No. 58-3022-0-001 (T.A.C II).\nM.B. and J.A.F.Y were supported by the Max Planck Society. J.A.F.Y was supported by the Werner Siemens-Stiftung (\"Paleobiotechnology\", Awarded to Prof. Pierre Stallforth and Prof. Christina Warinner).\n\n\n## References\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"html-math-method":"katex","output-file":"taxprofiler-manuscript.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.433","title":"nf-core/taxprofiler: highly parallelised and flexible pipeline for metagenomic taxonomic classification and profiling","author":[{"name":"Sofia Stamouli","given":"Sofia","family":"Stamouli","orcid":"0009-0006-0893-3771","affiliations":[{"ref":"ki"},{"ref":"kuh"}]},{"name":"Moritz Beber","given":"Moritz","family":"Beber","orcid":"0000-0003-2406-1978","affiliations":[{"ref":"usb"}]},{"name":"Lauri Mesilaakso","given":"Lauri","family":"Mesilaakso","orcid":null,"affiliations":[{"ref":"rog"}]},{"name":"Tanja Normark","given":"Tanja","family":"Normark","orcid":null,"affiliations":[{"ref":"ki"},{"ref":"kuh"}]},{"name":"Thomas A. Christensen II","given":"Thomas A.","family":"Christensen II","orcid":"0000-0003-1219-9320","affiliations":[{"ref":"ksu"}]},{"name":"Lili Andersson-Li","given":"Lili","family":"Andersson-Li","orcid":null,"affiliations":[{"ref":"ki"},{"ref":"kuh"}]},{"name":"Maxime Borry","given":"Maxime","family":"Borry","orcid":"0000-0001-9140-7559","affiliations":[{"ref":"eva"}]},{"name":"Mahwash Jamy","given":"Mahwash","family":"Jamy","orcid":null,"affiliations":[{"ref":"ki"},{"ref":"kuh"}]},{"name":"Rafal Stepien","given":"Rafal","family":"Stepien","orcid":null,"affiliations":[{"ref":"uv"}]},{"name":"nf-core community","url":"https://nf-co.re","affiliations":[{"ref":"xx"}]},{"name":"James A. Fellows Yates","given":"James A.","family":"Fellows Yates","orcid":"0000-0001-5585-6277","email":"james_fellows_yates@eva.mpg.de","corresponding":true,"affiliations":[{"ref":"eva"},{"ref":"hki"}]}],"affiliations":[{"id":"ki","name":"Department of Microbiology, Tumor and Cell Biology, Karolinkska Institutet","address":"Solnavägen 1","city":"Solna","state":"Stockholm","postal-code":17177,"country":"Sweden"},{"id":"kuh","name":"Department of Clinical Microbiology, Karolinska University Hospital","address":"Anna Steckséns gata 41","city":"Solna","state":"Stockholm","postal-code":17177,"country":"Sweden"},{"id":"usb","name":"Unseen Bio ApS","address":"Fruebjergvej 3","city":"Copenhagen","state":"Capital Region","postal-code":2100,"country":"Denmark"},{"id":"eva","name":"Department of Archaeogenetics, Max Planck Institute for Evolutionary Anthropology","address":"Deutsche Pl. 6","city":"Leipzig","state":"Saxony","postal-code":2115,"country":"Germany"},{"id":"hki","name":"Department of Paleobiotechnology, Leibniz Institute for Natural Product Research and Infection Biology Hans Knöll Institute","address":"Adolf-Reichwein-Straße","city":"Jena","state":"Thuringen","postal-code":4069,"country":"Germany"},{"id":"rog","name":"Department of Clinical Microbiology, Region Östergötland","address":"S:t Larsgatan\t49 B","city":"Linköping","state":"Östergötland","postal-code":58191,"country":"Sweden"},{"id":"ksu","name":"Veterinary Diagnostic Laboratory, Kansas State University College of Veterinary Medicine","address":"1800 Denison Ave","city":"Manhattan","state":"KS","postal-code":66506,"country":"United States"},{"id":"uv","name":"Center for Public Health Genomics, University of Virginia","address":"University Avenue 1827","city":"Charlottesville","state":"VA","postal-code":22903,"country":"United States"},{"id":"xx"}],"bibliography":["refs.bib"],"license":"CC BY"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}